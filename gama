<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connect Four - Select Game Mode</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            background: linear-gradient(135deg, #0b3d91, #141e30);
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white;
            flex-direction: column;
        }
        .game-board {
            display: grid;
            grid-template-columns: repeat(7, 80px);
            grid-template-rows: repeat(6, 80px);
            gap: 5px;
            background-color: #1f2a4c;
            border-radius: 15px;
            padding: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            margin-bottom: 20px;
        }
        .cell {
            width: 80px;
            height: 80px;
            background-color: #303c5c;
            border-radius: 50%;
            border: 3px solid #1a2238;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .cell:hover {
            background-color: #4e5c7e;
        }
        .player-1 {
            background-color: #f44336; /* Red */
        }
        .player-2 {
            background-color: #ffeb3b; /* Yellow */
        }
        .message {
            font-size: 24px;
            margin-top: 20px;
            text-align: center;
            color: #ffffff;
        }
        button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
            background-color: #0d47a1;
            color: white;
            border: none;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
        button:hover {
            background-color: #1565c0;
        }
        button:focus {
            outline: none;
        }
    </style>
</head>
<body>

    <div id="gameModeSelection">
        <h1>Select Game Mode</h1>
        <button onclick="startGame('vsComputer')">1 vs. Computer</button>
        <button onclick="startGame('vsPlayer')">1 vs. 1</button>
    </div>

    <div id="gameContainer" style="display: none;">
        <div class="game-board" id="gameBoard"></div>
        <div class="message" id="message">Your Turn</div>
        <button onclick="resetGame()">Restart Game</button>
    </div>

<script>
    const rows = 6;
    const cols = 7;
    let currentPlayer = 1;  // 1 for player, 2 for computer
    let board = Array.from({ length: rows }, () => Array(cols).fill(null));
    let gameMode = ''; // Holds the game mode: 'vsComputer' or 'vsPlayer'

    const gameBoard = document.getElementById('gameBoard');
    const message = document.getElementById('message');
    const gameContainer = document.getElementById('gameContainer');
    const gameModeSelection = document.getElementById('gameModeSelection');

    function startGame(mode) {
        gameMode = mode;
        gameModeSelection.style.display = 'none';  // Hide game mode selection screen
        gameContainer.style.display = 'block';  // Show the game board
        createBoard();
    }

    function createBoard() {
        gameBoard.innerHTML = '';
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = r;
                cell.dataset.col = c;
                cell.addEventListener('click', handleCellClick);
                gameBoard.appendChild(cell);
            }
        }
    }

    function handleCellClick(e) {
        if ((gameMode === 'vsPlayer' || currentPlayer === 1) && !board[parseInt(e.target.dataset.row)][parseInt(e.target.dataset.col)]) {  // Only allow human player to play
            const col = parseInt(e.target.dataset.col);
            makeMove(col);
        }
    }

    function makeMove(col) {
        for (let row = rows - 1; row >= 0; row--) {
            if (!board[row][col]) {
                board[row][col] = currentPlayer;
                updateBoard();
                if (checkWin(row, col)) {
                    message.textContent = `${gameMode === 'vsComputer' && currentPlayer === 1 ? "You" : "Player " + currentPlayer} wins!`;
                    disableBoard();
                } else {
                    currentPlayer = currentPlayer === 1 ? 2 : 1;
                    message.textContent = gameMode === 'vsComputer' && currentPlayer === 1 ? "Your Turn" : `Player ${currentPlayer}'s turn`;
                    if (currentPlayer === 2 && gameMode === 'vsComputer') {  // If it's computer's turn
                        setTimeout(computerMove, 1000);  // Computer move after 1 second
                    }
                }
                return;
            }
        }
    }

    function computerMove() {
        const availableCols = [];
        for (let c = 0; c < cols; c++) {
            if (!board[0][c]) {
                availableCols.push(c);
            }
        }
        const randomCol = availableCols[Math.floor(Math.random() * availableCols.length)];
        makeMove(randomCol);
    }

    function updateBoard() {
        const cells = gameBoard.querySelectorAll('.cell');
        cells.forEach(cell => {
            const row = cell.dataset.row;
            const col = cell.dataset.col;
            const player = board[row][col];
            if (player === 1) {
                cell.classList.add('player-1');
                cell.classList.remove('player-2');
            } else if (player === 2) {
                cell.classList.add('player-2');
                cell.classList.remove('player-1');
            } else {
                cell.classList.remove('player-1', 'player-2');
            }
        });
    }

    function checkWin(row, col) {
        return (
            checkDirection(row, col, 0, 1) || // Horizontal
            checkDirection(row, col, 1, 0) || // Vertical
            checkDirection(row, col, 1, 1) || // Diagonal (down-right)
            checkDirection(row, col, 1, -1)   // Diagonal (down-left)
        );
    }

    function checkDirection(row, col, deltaRow, deltaCol) {
        let count = 1;
        for (let i = 1; i < 4; i++) {
            const newRow = row + i * deltaRow;
            const newCol = col + i * deltaCol;
            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && board[newRow][newCol] === currentPlayer) {
                count++;
            } else {
                break;
            }
        }
        for (let i = 1; i < 4; i++) {
            const newRow = row - i * deltaRow;
            const newCol = col - i * deltaCol;
            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && board[newRow][newCol] === currentPlayer) {
                count++;
            } else {
                break;
            }
        }
        return count >= 4;
    }

    function disableBoard() {
        const cells = gameBoard.querySelectorAll('.cell');
        cells.forEach(cell => cell.removeEventListener('click', handleCellClick));
    }

    function resetGame() {
        board = Array.from({ length: rows }, () => Array(cols).fill(null));
        currentPlayer = 1;
        message.textContent = gameMode === 'vsComputer' ? "Your Turn" : "Player 1's turn";
        createBoard();
    }
</script>

</body>
</html>
